/**
 * Analysis Results Page
 * This displays the AI-generated betting insights after analysis
 */
'use client';

import { useState, useEffect } from 'react';
import { useRouter, useSearchParams } from 'next/navigation';
import { getBettingHistory, updateAnalysisOutcome } from '@/utils/api';

export default function AnalysisResults() {
  const router = useRouter();
  const searchParams = useSearchParams();
  const analysisId = searchParams.get('id');
  
  // State for loading and analysis results
  const [loading, setLoading] = useState(true);
  const [analysis, setAnalysis] = useState(null);
  const [error, setError] = useState(null);
  
  // Load analysis data from history based on ID
  useEffect(() => {
    if (!analysisId) {
      setError('No analysis ID provided');
      setLoading(false);
      return;
    }
    
    try {
      // Get history from localStorage
      const history = getBettingHistory();
      
      // Find the specific analysis by ID
      const foundAnalysis = history.find(item => item.id === analysisId);
      
      if (foundAnalysis) {
        setAnalysis(foundAnalysis);
      } else {
        setError('Analysis not found. It may have been deleted or expired.');
      }
    } catch (error) {
      console.error('Error loading analysis:', error);
      setError('Failed to load analysis data');
    } finally {
      setLoading(false);
    }
  }, [analysisId]);
  
  // Handle updating analysis outcome (for demo purposes - in real app, this would be more sophisticated)
  const handleUpdateOutcome = (outcome, roi) => {
    try {
      updateAnalysisOutcome(analysisId, outcome, roi);
      
      // Update the local analysis state
      setAnalysis(prev => ({ ...prev, outcome, roi }));
      
      // Show success message or feedback
      alert(`Outcome updated to ${outcome}`);
    } catch (error) {
      console.error('Failed to update outcome:', error);
      alert('Failed to update outcome');
    }
  };
  
  // Helper function to render confidence level
  const renderConfidenceLevel = (confidence) => {
    let color = 'yellow';
    let label = 'Medium';
    
    if (confidence >= 0.8) {
      color = 'green';
      label = 'High';
    } else if (confidence <= 0.5) {
      color = 'red';
      label = 'Low';
    }
    
    return (
      <div className="flex items-center">
        <div className={`w-16 bg-gray-200 rounded-full h-2.5 dark:bg-gray-700 mr-2`}>
          <div className={`bg-${color}-500 h-2.5 rounded-full`} style={{ width: `${confidence * 100}%` }}></div>
        </div>
        <span className={`text-${color}-700 dark:text-${color}-500 text-sm font-medium`}>{label} ({(confidence * 100).toFixed(0)}%)</span>
      </div>
    );
  };
  
  if (loading) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900 flex items-center justify-center">
        <div className="text-center">
          <div className="animate-spin rounded-full h-16 w-16 border-b-2 border-indigo-500 mx-auto"></div>
          <h3 className="mt-4 text-lg font-medium text-gray-900 dark:text-white">Generating AI analysis...</h3>
          <p className="mt-1 text-sm text-gray-500 dark:text-gray-400">This may take a few moments</p>
        </div>
      </div>
    );
  }
  
  if (error) {
    return (
      <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
        <header className="bg-white dark:bg-gray-800 shadow">
          <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8 flex justify-between items-center">
            <h1 className="text-3xl font-bold text-gray-900 dark:text-white">Betting Assistant</h1>
            <nav className="flex space-x-4">
              <a href="/" className="text-gray-500 dark:text-gray-300 hover:text-indigo-600 dark:hover:text-indigo-400">Dashboard</a>
              <a href="/events" className="text-gray-500 dark:text-gray-300 hover:text-indigo-600 dark:hover:text-indigo-400">Events</a>
              <a href="/analysis" className="text-gray-900 dark:text-white font-medium hover:text-indigo-600 dark:hover:text-indigo-400">Analysis</a>
              <a href="/history" className="text-gray-500 dark:text-gray-300 hover:text-indigo-600 dark:hover:text-indigo-400">History</a>
              <a href="/settings" className="text-gray-500 dark:text-gray-300 hover:text-indigo-600 dark:hover:text-indigo-400">Settings</a>
            </nav>
          </div>
        </header>
        <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
          <div className="px-4 py-6 sm:px-0">
            <div className="bg-red-50 dark:bg-red-900 p-4 rounded-md">
              <h3 className="text-lg font-medium text-red-800 dark:text-red-200">Error Generating Analysis</h3>
              <p className="mt-2 text-sm text-red-700 dark:text-red-300">{error}</p>
              <div className="mt-4">
                <button
                  onClick={() => router.push('/analysis/new')}
                  className="inline-flex items-center px-4 py-2 border border-transparent text-sm font-medium rounded-md shadow-sm text-white bg-red-600 hover:bg-red-700"
                >
                  Try Again
                </button>
              </div>
            </div>
          </div>
        </main>
      </div>
    );
  }
  
  return (
    <div className="min-h-screen bg-gray-50 dark:bg-gray-900">
      {/* Header */}
      <header className="bg-white dark:bg-gray-800 shadow">
        <div className="max-w-7xl mx-auto py-6 px-4 sm:px-6 lg:px-8 flex justify-between items-center">
          <h1 className="text-3xl font-bold text-gray-900 dark:text-white">
            Betting Assistant
          </h1>
          <nav className="flex space-x-4">
            <a href="/" className="text-gray-500 dark:text-gray-300 hover:text-indigo-600 dark:hover:text-indigo-400">Dashboard</a>
            <a href="/events" className="text-gray-500 dark:text-gray-300 hover:text-indigo-600 dark:hover:text-indigo-400">Events</a>
            <a href="/analysis" className="text-gray-900 dark:text-white font-medium hover:text-indigo-600 dark:hover:text-indigo-400">Analysis</a>
            <a href="/history" className="text-gray-500 dark:text-gray-300 hover:text-indigo-600 dark:hover:text-indigo-400">History</a>
            <a href="/settings" className="text-gray-500 dark:text-gray-300 hover:text-indigo-600 dark:hover:text-indigo-400">Settings</a>
          </nav>
        </div>
      </header>

      {/* Main Content */}
      <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
        <div className="px-4 py-6 sm:px-0">
          {analysis && (
            <>
              {/* Event Details Banner */}
              <div className="bg-white dark:bg-gray-800 shadow overflow-hidden sm:rounded-lg mb-8">
                <div className="px-4 py-5 sm:px-6 flex justify-between items-center">
                  <div>
                    <h2 className="text-xl font-bold text-gray-900 dark:text-white">{analysis.event.teams}</h2>
                    <p className="mt-1 max-w-2xl text-sm text-gray-500 dark:text-gray-400">
                      {analysis.event.sport} • {analysis.event.league} • {analysis.event.date}
                    </p>
                  </div>
                  <div className="hidden sm:block">
                    <button
                      onClick={() => router.push('/analysis/new')}
                      className="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md shadow-sm text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600"
                    >
                      New Analysis
                    </button>
                  </div>
                </div>
              </div>

              {/* Analysis Results */}
              <div className="grid grid-cols-1 gap-6 lg:grid-cols-3">
                {/* Main Analysis */}
                <div className="lg:col-span-2">
                  <div className="bg-white dark:bg-gray-800 shadow overflow-hidden sm:rounded-lg">
                    <div className="px-4 py-5 sm:px-6">
                      <h3 className="text-lg leading-6 font-medium text-gray-900 dark:text-white">AI Analysis</h3>
                      <p className="mt-1 max-w-2xl text-sm text-gray-500 dark:text-gray-400">Generated on {new Date().toLocaleDateString()}</p>
                    </div>
                    
                    <div className="border-t border-gray-200 dark:border-gray-700 px-4 py-5 sm:px-6">
                      <h4 className="text-md font-medium text-gray-900 dark:text-white mb-2">Summary</h4>
                      <p className="text-sm text-gray-700 dark:text-gray-300">{analysis.insights.summary}</p>
                    </div>
                    
                    <div className="border-t border-gray-200 dark:border-gray-700 px-4 py-5 sm:px-6">
                      <h4 className="text-md font-medium text-gray-900 dark:text-white mb-2">Key Factors</h4>
                      <ul className="list-disc pl-5 text-sm text-gray-700 dark:text-gray-300 space-y-1">
                        {analysis.insights?.keyFactors?.map((factor, index) => (
                          <li key={index}>{factor}</li>
                        )) || <li>No key factors provided</li>}
                      </ul>
                    </div>
                    
                    <div className="border-t border-gray-200 dark:border-gray-700 px-4 py-5 sm:px-6">
                      <h4 className="text-md font-medium text-gray-900 dark:text-white mb-3">Risks to Consider</h4>
                      <ul className="list-disc pl-5 text-sm text-gray-700 dark:text-gray-300 space-y-1">
                        {analysis.insights?.risksToConsider?.map((risk, index) => (
                          <li key={index}>{risk}</li>
                        )) || <li>No risks identified</li>}
                      </ul>
                    </div>
                    
                    <div className="border-t border-gray-200 dark:border-gray-700 px-4 py-5 sm:px-6">
                      <h4 className="text-md font-medium text-gray-900 dark:text-white mb-2">Additional Insights</h4>

    {/* Main Content */}
    <main className="max-w-7xl mx-auto py-6 sm:px-6 lg:px-8">
      <div className="px-4 py-6 sm:px-0">
        {analysis && (
          <>
            {/* Event Details Banner */}
            <div className="bg-white dark:bg-gray-800 shadow overflow-hidden sm:rounded-lg mb-8">
              <div className="px-4 py-5 sm:px-6 flex justify-between items-center">
                <div>
                  <h2 className="text-xl font-bold text-gray-900 dark:text-white">{analysis.event.teams}</h2>
                  <p className="mt-1 max-w-2xl text-sm text-gray-500 dark:text-gray-400">
                    {analysis.event.sport} • {analysis.event.league} • {analysis.event.date}
                  </p>
                </div>
                <div className="hidden sm:block">
                  <button
                    onClick={() => router.push('/analysis/new')}
                    className="inline-flex items-center px-4 py-2 border border-gray-300 dark:border-gray-600 text-sm font-medium rounded-md shadow-sm text-gray-700 dark:text-gray-200 bg-white dark:bg-gray-700 hover:bg-gray-50 dark:hover:bg-gray-600"
                  >
                    New Analysis
                  </button>
                </div>
              </div>
            </div>

            {/* Analysis Results */}
            <div className="grid grid-cols-1 gap-6 lg:grid-cols-3">
              {/* Main Analysis */}
              <div className="lg:col-span-2">
                <div className="bg-white dark:bg-gray-800 shadow overflow-hidden sm:rounded-lg">
                  <div className="px-4 py-5 sm:px-6">
                    <h3 className="text-lg leading-6 font-medium text-gray-900 dark:text-white">AI Analysis</h3>
                    <p className="mt-1 max-w-2xl text-sm text-gray-500 dark:text-gray-400">Generated on {new Date().toLocaleDateString()}</p>
                  </div>

                  <div className="border-t border-gray-200 dark:border-gray-700 px-4 py-5 sm:px-6">
                    <h4 className="text-md font-medium text-gray-900 dark:text-white mb-2">Summary</h4>
                    <p className="text-sm text-gray-700 dark:text-gray-300">{analysis.insights.summary}</p>
                  </div>

                  <div className="border-t border-gray-200 dark:border-gray-700 px-4 py-5 sm:px-6">
                    <h4 className="text-md font-medium text-gray-900 dark:text-white mb-2">Key Factors</h4>
                    <ul className="list-disc pl-5 text-sm text-gray-700 dark:text-gray-300 space-y-1">
                      {analysis.insights?.keyFactors?.map((factor, index) => (
                        <li key={index}>{factor}</li>
                      )) || <li>No key factors provided</li>}
                    </ul>
                  </div>

                  <div className="border-t border-gray-200 dark:border-gray-700 px-4 py-5 sm:px-6">
                    <h4 className="text-md font-medium text-gray-900 dark:text-white mb-3">Risks to Consider</h4>
                    <ul className="list-disc pl-5 text-sm text-gray-700 dark:text-gray-300 space-y-1">
                      {analysis.insights?.risksToConsider?.map((risk, index) => (
                        <li key={index}>{risk}</li>
                      )) || <li>No risks identified</li>}
                    </ul>
                  </div>

                  <div className="border-t border-gray-200 dark:border-gray-700 px-4 py-5 sm:px-6">
                    <h4 className="text-md font-medium text-gray-900 dark:text-white mb-2">Additional Insights</h4>
                    <p className="text-sm text-gray-700 dark:text-gray-300">{analysis.insights.additionalInsights}</p>
                  </div>
                </div>
              </div>

              {/* Recommendations */}
              <div className="lg:col-span-1">
                <div className="bg-white dark:bg-gray-800 shadow overflow-hidden sm:rounded-lg mb-6">
                  <div className="px-4 py-5 sm:px-6">
                    <h3 className="text-lg leading-6 font-medium text-gray-900 dark:text-white">Recommendation</h3>
                  </div>
                  <div className="border-t border-gray-200 dark:border-gray-700 px-4 py-5 sm:px-6">
                    <div className="text-center">
                      <div className="text-2xl font-bold text-indigo-600 dark:text-indigo-400">
                        {analysis.insights?.recommendation || 'No specific recommendation'}
                      </div>
                      <div className="mt-3">
                        <p className="text-sm text-gray-500 dark:text-gray-400">Confidence Level</p>
                        <div className="flex justify-center mt-2">{renderConfidenceLevel(analysis.insights?.confidence || 0.5)}</div>
                      </div>

                      {/* Outcome Tracking Buttons (for demo purposes) */}
                      <div className="mt-6 border-t border-gray-200 dark:border-gray-700 pt-4">
                        <p className="text-sm text-gray-500 dark:text-gray-400 mb-3">Update Outcome</p>
                        <div className="flex flex-wrap justify-center gap-2">
                          <button
                            onClick={() => handleUpdateOutcome('win', '+110')}
                            className="px-3 py-1 text-xs font-medium rounded bg-green-100 text-green-800 dark:bg-green-800 dark:text-green-100 hover:bg-green-200 dark:hover:bg-green-700"
                          >
                            Win
                          </button>
                          <button
                            onClick={() => handleUpdateOutcome('loss', '-110')}
                            className="px-3 py-1 text-xs font-medium rounded bg-red-100 text-red-800 dark:bg-red-800 dark:text-red-100 hover:bg-red-200 dark:hover:bg-red-700"
                          >
                            Loss
                          </button>
                          <button
                            onClick={() => handleUpdateOutcome('push', 'Even')}
                            className="px-3 py-1 text-xs font-medium rounded bg-gray-100 text-gray-800 dark:bg-gray-700 dark:text-gray-100 hover:bg-gray-200 dark:hover:bg-gray-600"
                          >
                            Push
                          </button>
                        </div>
                      </div>
                    </div>
                  </div>
                </div>

                <div className="bg-white dark:bg-gray-800 shadow overflow-hidden sm:rounded-lg">
                  <div className="px-4 py-5 sm:px-6">
                    <h3 className="text-lg leading-6 font-medium text-gray-900 dark:text-white">Alternative Bets</h3>
                  </div>
                  <div className="border-t border-gray-200 dark:border-gray-700">
                    {analysis.insights?.alternativeBets?.length > 0 ? (
                      <ul className="divide-y divide-gray-200 dark:divide-gray-700">
                        {analysis.insights.alternativeBets.map((bet, index) => (
                          <li key={index} className="px-4 py-4">
                            <div className="flex justify-between">
                              <p className="text-sm font-medium text-gray-900 dark:text-white">{bet.bet}</p>
                              <div>{renderConfidenceLevel(bet.confidence)}</div>
                            </div>
                          </li>
                        ))}
                      </ul>
                    ) : (
                      <div className="px-4 py-5 text-center text-sm text-gray-500 dark:text-gray-400">
                        No alternative bets recommended
                      </div>
                    )}
                  </div>
                </div>
                <div className="mt-6">
                  <div className="flex space-x-3">
                    <button
                      onClick={() => {
                        // Would save this analysis to user history
                        alert("Analysis saved to your history!");
                      }}
                      className="flex-1 bg-white dark:bg-gray-700 py-2 px-4 border border-gray-300 dark:border-gray-600 rounded-md shadow-sm text-sm font-medium text-gray-700 dark:text-gray-200 hover:bg-gray-50 dark:hover:bg-gray-600"
                    >
                      Save Analysis
                    </button>
                    <button
                      onClick={() => router.push('/analysis/new')}
                      className="flex-1 inline-flex justify-center py-2 px-4 border border-transparent shadow-sm text-sm font-medium rounded-md text-white bg-indigo-600 hover:bg-indigo-700"
                    >
                      New Analysis
                    </button>
                  </div>
                </div>
              </div>
            </div>
          </>
        )}
      </div>
    </main>

      {/* Footer */}
      <footer className="bg-white dark:bg-gray-800 shadow mt-8">
        <div className="max-w-7xl mx-auto py-4 px-4 sm:px-6 lg:px-8">
          <p className="text-center text-sm text-gray-500 dark:text-gray-400">
            Betting Assistant © {new Date().getFullYear()} - AI-powered betting decision helper
          </p>
        </div>
      </footer>
    </div>
  );
}
